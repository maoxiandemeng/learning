创建list  有序的
L = ['aaa', 'bbb', 'ccc']
append()添加一个元素
insert()指定位置添加元素
pop()无参数时删除最后一个元素，有参数删除指定位置的元素

创建tuple
t = ('aaa', 'bbb', 'ccc') 用()代替[]
不可修改元素，可以访问。
t = ('aaa',)创建一个元素的tuple需要加“，”才表示是tuple

缩进请严格按照Python的习惯写法：4个空格，不要使用Tab，更不要混合Tab和空格，
否则很容易造成因为缩进引起的语法错误。
并且退出缩进需要多敲一行回车

dict:表示如下 key-value存储  key不能重复  无序的
d = {
    'aaa': 95,
    'bbb': 85,
    'ccc': 59
}
添加
d.setdefault('ddd', 65)
删除
d.pop('aaa', 95)
d['aaa']  d.get('aaa')获得对应aaa的值
查找速度快，效率高，
占内存
for key in d  遍历d的key

set不能重复  无序的
s = set(['A', 'B', 'C'，'B'])  set(['A', 'C'，'B'])
'A' in s 判断元素是否在set中
for name in s:遍历元素
s.add()添加元素
s.remove()移除元素

要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数 abs，它接收一个参数。
abs(-12)  12
比较函数 cmp(x, y) 就需要两个参数，如果 x<y，返回 -1，如果 x==y，返回 0，如果 x>y，返回 1：
int()函数可以把其他数据类型转换为整数
str()函数把其他类型转换成 str
sum()计算所有元素之和

定义一个函数要使用 def 语句，依次写出函数名、括号、括号中的参数和冒号:，
然后，在缩进块中编写函数体，函数的返回值用 return 语句返回。
函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。
如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None

函数之返回多值
在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，
所以，Python的函数返回多值其实就是返回一个tuple
在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。
n! = 1 * 2 * 3 * ... * n
def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)
使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，
每当进入一个函数调用，栈就会加一层栈帧，
每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。
fact(1000)就会报错

定义函数的时候，还可以有默认参数。
函数的默认参数的作用是简化调用，你只需要把必须的参数传进去。
但是在需要的时候，又可以传入额外的参数来覆盖默认参数值。

如果想让一个函数能接受任意个参数，我们就可以定义一个可变参数：
def fn(*args):
    print args
可变参数的名字前面有个 * 号，我们可以传入0个、1个或多个参数给可变参数

索引迭代  迭代永远是取出元素本身，而非元素的索引。
L = ['Adam', 'Lisa', 'Bart', 'Paul']
for index, name in enumerate(L):
     print index, '-', name
0 - Adam
1 - Lisa
2 - Bart
3 - Paul

迭代dict的value
dict 对象有一个 values() 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：

d = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }
print d.values()
# [85, 95, 59]
for v in d.values():
    print v
还有一个 itervalues() 方法，用 itervalues() 方法替代 values() 方法，迭代效果完全一样
那这两个方法有何不同之处呢？
1. values() 方法实际上把一个 dict 转换成了包含 value 的list。
2. 但是 itervalues() 方法不会转换，它会在迭代过程中依次从 dict 中取出 value，
所以 itervalues() 方法比 values() 方法节省了生成 list 所需的内存。
3. 打印 itervalues() 发现它返回一个 <dictionary-valueiterator> 对象，
这说明在Python中，for 循环可作用的迭代对象远不止 list，tuple，str，unicode，dict等，
任何可迭代对象都可以作用于for循环，而内部如何迭代我们通常并不用关心。
如果一个对象说自己可迭代，那我们就直接用 for 循环去迭代它，可见，迭代是一种抽象的数据操作，
它不对迭代对象内部的数据有任何要求。

items() 方法把dict对象转换成了包含tuple的list，我们对这个list进行迭代，可以同时获得key和value：
for key, value in d.items():
    print key, ':', value


生成列表
要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]，我们可以用range(1, 11)：
要生成[1x1, 2x2, 3x3, ..., 10x10]怎么做
[x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

条件过滤
列表生成式的 for 循环后面还可以加上 if 判断。例如：
[x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
如果我们只想要偶数的平方，不改动 range()的情况下，可以加上 if 来筛选：
[x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]
有了 if 条件，只有 if 判断为 True 的时候，才把循环的当前元素添加到列表中。

多层表达式
for循环可以嵌套，因此，在列表生成式中，也可以用多层 for 循环来生成列表。
对于字符串 'ABC' 和 '123'，可以使用两层循环，生成全排列：
[m + n for m in 'ABC' for n in '123']
['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']





